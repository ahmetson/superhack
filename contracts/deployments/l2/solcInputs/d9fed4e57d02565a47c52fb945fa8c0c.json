{
  "language": "Solidity",
  "sources": {
    "@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/**\n * @title ICrossDomainMessenger\n */\ninterface ICrossDomainMessenger {\n    /**********\n     * Events *\n     **********/\n\n    event SentMessage(\n        address indexed target,\n        address sender,\n        bytes message,\n        uint256 messageNonce,\n        uint256 gasLimit\n    );\n    event RelayedMessage(bytes32 indexed msgHash);\n    event FailedRelayedMessage(bytes32 indexed msgHash);\n\n    /*************\n     * Variables *\n     *************/\n\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n"
    },
    "contracts/FromL2_ControlL1Greeter.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\n// This contracts runs on L2, and controls a Greeter on L1.\n// The greeter address is specific to Goerli.\npragma solidity ^0.8.0;\n\nimport { ICrossDomainMessenger } from\n\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\ncontract FromL2_ControlL1Greeter {\n    // Taken from https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts/deployments/goerli#layer-2-contracts\n    // Should be the same on all Optimism networks\n    address crossDomainMessengerAddr = 0x4200000000000000000000000000000000000007;\n\n    function setGreeting(address greeterL1Addr, string calldata _greeting) public {\n        bytes memory message;\n\n        message = abi.encodeWithSignature(\"setGreeting(string,address)\",\n            _greeting, msg.sender);\n\n        ICrossDomainMessenger(crossDomainMessengerAddr).sendMessage(\n            greeterL1Addr,\n            message,\n            1000000   // irrelevant here\n        );\n    }      // function setGreeting\n\n}          // contract FromL2_ControlL1Greeter"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}