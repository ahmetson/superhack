{
  "language": "Solidity",
  "sources": {
    "@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/**\n * @title ICrossDomainMessenger\n */\ninterface ICrossDomainMessenger {\n    /**********\n     * Events *\n     **********/\n\n    event SentMessage(\n        address indexed target,\n        address sender,\n        bytes message,\n        uint256 messageNonce,\n        uint256 gasLimit\n    );\n    event RelayedMessage(bytes32 indexed msgHash);\n    event FailedRelayedMessage(bytes32 indexed msgHash);\n\n    /*************\n     * Variables *\n     *************/\n\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n"
    },
    "contracts/FromL1_ControlL2Greeter.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\n// This contracts runs on L1, and controls a Greeter on L2.\n// The addresses are specific to Optimistic Goerli.\npragma solidity ^0.8.0;\n\nimport { ICrossDomainMessenger } from\n\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\ncontract FromL1_ControlL2Greeter {\n    // Taken from https://community.optimism.io/docs/useful-tools/networks/#optimism-goerli\n\n    function setGreeting(address crossDomainMessengerAddr, address greeterL2Addr, string calldata _greeting) public {\n        bytes memory message;\n\n        message = abi.encodeWithSignature(\"setGreeting(string,address)\",\n            _greeting, msg.sender);\n\n        ICrossDomainMessenger(crossDomainMessengerAddr).sendMessage(\n            greeterL2Addr,\n            message,\n            1000000   // within the free gas limit amount\n        );\n    }      // function setGreeting\n\n}          // contract FromL1_ControlL2Greeter"
    },
    "contracts/Greeter.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n// For cross domain messages' origin\nimport { ICrossDomainMessenger } from\n\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\ncontract Greeter {\n    string public greeting;\n    address public l1cdm; // cross-domain-messenger\n\n    event SetGreeting(\n        address sender,     // msg.sender\n        address origin,     // tx.origin\n        address xorigin,    // cross domain origin, if any\n        address user,       // user address, if given\n        string greeting     // The greeting\n    );\n\n\n    constructor(address crossChainManager) {\n        l1cdm = crossChainManager;\n        greeting = \"not called yet\";\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting, address _user) public {\n        greeting = _greeting;\n        emit SetGreeting(msg.sender, tx.origin, getXorig(), _user, _greeting);\n    }\n\n\n    function setGreeting(string memory _greeting) public {\n        greeting = _greeting;\n        emit SetGreeting(msg.sender, tx.origin, getXorig(), address(0), _greeting);\n    }\n\n    // Get the cross domain origin, if any\n    function getXorig() private view returns (address) {\n        // Get the cross domain messenger's address each time.\n        // This is less resource intensive than writing to storage.\n        address cdmAddr = address(0);\n\n        // Goerli\n        if (block.chainid == 11155111)\n            cdmAddr = l1cdm;\n        else if (block.chainid == 42069)\n            cdmAddr = 0x4200000000000000000000000000000000000007;\n        else revert(\"unsupported chain id\");\n\n        // If this isn't a cross domain message\n        if (msg.sender != cdmAddr)\n            return address(0);\n\n        // If it is a cross domain message, find out where it is from\n        return ICrossDomainMessenger(cdmAddr).xDomainMessageSender();\n    }    // getXorig()\n}   // contract Greeter"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}